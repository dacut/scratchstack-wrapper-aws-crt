mod connection;
mod connection_manager;
mod proxy;
mod request_response;
mod server;
mod status_code;
pub use {connection::*, connection_manager::*, proxy::*, request_response::*, server::*, status_code::*};

use crate::common::{aws_error_enum_begin_range, aws_error_enum_end_range, aws_log_subject_begin_range, AwsCAllocator};

pub const AWS_C_HTTP_PACKAGE_ID: isize = 2;

#[repr(C)]
#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum AwsCHttpErrors {
    AWS_ERROR_HTTP_UNKNOWN = aws_error_enum_begin_range(AWS_C_HTTP_PACKAGE_ID),
    AWS_ERROR_HTTP_HEADER_NOT_FOUND,
    AWS_ERROR_HTTP_INVALID_HEADER_FIELD,
    AWS_ERROR_HTTP_INVALID_HEADER_NAME,
    AWS_ERROR_HTTP_INVALID_HEADER_VALUE,
    AWS_ERROR_HTTP_INVALID_METHOD,
    AWS_ERROR_HTTP_INVALID_PATH,
    AWS_ERROR_HTTP_INVALID_STATUS_CODE,
    AWS_ERROR_HTTP_MISSING_BODY_STREAM,
    AWS_ERROR_HTTP_INVALID_BODY_STREAM,
    AWS_ERROR_HTTP_CONNECTION_CLOSED,
    AWS_ERROR_HTTP_SWITCHED_PROTOCOLS,
    AWS_ERROR_HTTP_UNSUPPORTED_PROTOCOL,
    AWS_ERROR_HTTP_REACTION_REQUIRED,
    AWS_ERROR_HTTP_DATA_NOT_AVAILABLE,
    AWS_ERROR_HTTP_OUTGOING_STREAM_LENGTH_INCORRECT,
    AWS_ERROR_HTTP_CALLBACK_FAILURE,
    AWS_ERROR_HTTP_WEBSOCKET_UPGRADE_FAILURE,
    AWS_ERROR_HTTP_WEBSOCKET_CLOSE_FRAME_SENT,
    AWS_ERROR_HTTP_WEBSOCKET_IS_MIDCHANNEL_HANDLER,
    AWS_ERROR_HTTP_CONNECTION_MANAGER_INVALID_STATE_FOR_ACQUIRE,
    AWS_ERROR_HTTP_CONNECTION_MANAGER_VENDED_CONNECTION_UNDERFLOW,
    AWS_ERROR_HTTP_SERVER_CLOSED,
    AWS_ERROR_HTTP_PROXY_CONNECT_FAILED,
    AWS_ERROR_HTTP_CONNECTION_MANAGER_SHUTTING_DOWN,
    AWS_ERROR_HTTP_CHANNEL_THROUGHPUT_FAILURE,
    AWS_ERROR_HTTP_PROTOCOL_ERROR,
    AWS_ERROR_HTTP_STREAM_IDS_EXHAUSTED,
    AWS_ERROR_HTTP_GOAWAY_RECEIVED,
    AWS_ERROR_HTTP_RST_STREAM_RECEIVED,
    AWS_ERROR_HTTP_RST_STREAM_SENT,
    AWS_ERROR_HTTP_STREAM_NOT_ACTIVATED,
    AWS_ERROR_HTTP_STREAM_HAS_COMPLETED,
    AWS_ERROR_HTTP_PROXY_STRATEGY_NTLM_CHALLENGE_TOKEN_MISSING,
    AWS_ERROR_HTTP_PROXY_STRATEGY_TOKEN_RETRIEVAL_FAILURE,
    AWS_ERROR_HTTP_PROXY_CONNECT_FAILED_RETRYABLE,
    AWS_ERROR_HTTP_PROTOCOL_SWITCH_FAILURE,
    AWS_ERROR_HTTP_MAX_CONCURRENT_STREAMS_EXCEEDED,
    AWS_ERROR_HTTP_STREAM_MANAGER_SHUTTING_DOWN,
    AWS_ERROR_HTTP_STREAM_MANAGER_CONNECTION_ACQUIRE_FAILURE,
    AWS_ERROR_HTTP_STREAM_MANAGER_UNEXPECTED_HTTP_VERSION,
    AWS_ERROR_HTTP_END_RANGE = aws_error_enum_end_range(AWS_C_HTTP_PACKAGE_ID),
}

#[repr(C)]
#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum AwsCHttp2ErrorCode {
    AWS_HTTP2_ERR_NO_ERROR = 0x00,
    AWS_HTTP2_ERR_PROTOCOL_ERROR = 0x01,
    AWS_HTTP2_ERR_INTERNAL_ERROR = 0x02,
    AWS_HTTP2_ERR_FLOW_CONTROL_ERROR = 0x03,
    AWS_HTTP2_ERR_SETTINGS_TIMEOUT = 0x04,
    AWS_HTTP2_ERR_STREAM_CLOSED = 0x05,
    AWS_HTTP2_ERR_FRAME_SIZE_ERROR = 0x06,
    AWS_HTTP2_ERR_REFUSED_STREAM = 0x07,
    AWS_HTTP2_ERR_CANCEL = 0x08,
    AWS_HTTP2_ERR_COMPRESSION_ERROR = 0x09,
    AWS_HTTP2_ERR_CONNECT_ERROR = 0x0A,
    AWS_HTTP2_ERR_ENHANCE_YOUR_CALM = 0x0B,
    AWS_HTTP2_ERR_INADEQUATE_SECURITY = 0x0C,
    AWS_HTTP2_ERR_HTTP_1_1_REQUIRED = 0x0D,
    AWS_HTTP2_ERR_COUNT,
}

#[repr(C)]
#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum AwsCHttpLogSubject {
    AWS_LS_HTTP_GENERAL = aws_log_subject_begin_range(AWS_C_HTTP_PACKAGE_ID),
    AWS_LS_HTTP_CONNECTION,
    AWS_LS_HTTP_ENCODER,
    AWS_LS_HTTP_DECODER,
    AWS_LS_HTTP_SERVER,
    AWS_LS_HTTP_STREAM,
    AWS_LS_HTTP_CONNECTION_MANAGER,
    AWS_LS_HTTP_STREAM_MANAGER,
    AWS_LS_HTTP_WEBSOCKET,
    AWS_LS_HTTP_WEBSOCKET_SETUP,
    AWS_LS_HTTP_PROXY_NEGOTIATION,
}

#[repr(C)]
#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum AwsCHttpVersion {
    AWS_HTTP_VERSION_UNKNOWN, /* Invalid version. */
    AWS_HTTP_VERSION_1_0,
    AWS_HTTP_VERSION_1_1,
    AWS_HTTP_VERSION_2,
    AWS_HTTP_VERSION_COUNT,
}

#[repr(C)]
#[allow(dead_code, non_camel_case_types)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
enum AwsCHttpMethod {
    AWS_HTTP_METHOD_UNKNOWN, /* Unrecognized value. */
    AWS_HTTP_METHOD_GET,
    AWS_HTTP_METHOD_HEAD,
    AWS_HTTP_METHOD_CONNECT,
    AWS_HTTP_METHOD_COUNT, /* Number of enums */
}

#[link(name = "aws-c-http")]
extern "C" {
    pub fn aws_http_library_init(allocator: *mut AwsCAllocator);
    pub fn aws_http_library_clean_up();
    pub fn aws_http_status_text(status_code: i32) -> *const u8;
}
